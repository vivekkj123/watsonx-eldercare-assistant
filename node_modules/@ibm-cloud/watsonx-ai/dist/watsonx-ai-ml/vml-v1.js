"use strict";
/**
 * (C) Copyright IBM Corp. 2024.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * IBM OpenAPI SDK Code Generator Version: 3.90.0-5aad763d-20240506-203857
 */
/* eslint-disable max-classes-per-file */
/* eslint-disable no-await-in-loop */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var get_authenticator_from_environment_1 = require("../auth/utils/get-authenticator-from-environment");
var common_1 = require("../lib/common");
/**
 * SDK entrypoint for IBM watsonx.ai product
 *
 * API Version: v1
 */
var PLATFORM_URLS_MAP = {
    'https://jp-tok.ml.cloud.ibm.com': 'https://api.jp-tok.dataplatform.cloud.ibm.com/wx',
    'https://eu-gb.ml.cloud.ibm.com': 'https://api.eu-gb.dataplatform.cloud.ibm.com/wx',
    'https://eu-de.ml.cloud.ibm.com': 'https://api.eu-de.dataplatform.cloud.ibm.com/wx',
    'https://us-south.ml.cloud.ibm.com': 'https://api.dataplatform.cloud.ibm.com/wx',
    'https://private.jp-tok.ml.cloud.ibm.com': 'https://api.jp-tok.dataplatform.cloud.ibm.com/wx',
    'https://private.eu-gb.ml.cloud.ibm.com': 'https://api.eu-gb.dataplatform.cloud.ibm.com/wx',
    'https://private.eu-de.ml.cloud.ibm.com': 'https://api.eu-de.dataplatform.cloud.ibm.com/wx',
    'https://private.us-south.ml.cloud.ibm.com': 'https://api.dataplatform.cloud.ibm.com/wx',
};
var WatsonxAiMlVmlv1 = /** @class */ (function (_super) {
    __extends(WatsonxAiMlVmlv1, _super);
    /**
     * Construct a WatsonxAiMlVmlv1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - The version date for the API of the form `YYYY-MM-DD`.
     * @param {string} [options.serviceUrl] - The base URL for the service
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
     * @constructor
     * @returns {WatsonxAiMlVmlv1}
     */
    function WatsonxAiMlVmlv1(options) {
        var _this = this;
        options = options || {};
        var _requiredParams = ['version'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(options, _requiredParams, null);
        if (_validationErrors) {
            throw _validationErrors;
        }
        _this = _super.call(this, options) || this;
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        else {
            _this.setServiceUrl(WatsonxAiMlVmlv1.DEFAULT_SERVICE_URL);
        }
        if (options.platformUrl) {
            _this.wxServiceUrl = options.platformUrl.concat('/wx');
        }
        else if (PLATFORM_URLS_MAP[_this.baseOptions.serviceUrl]) {
            _this.wxServiceUrl = PLATFORM_URLS_MAP[_this.baseOptions.serviceUrl];
        }
        else {
            _this.wxServiceUrl = _this.baseOptions.serviceUrl.concat('/wx');
        }
        _this.version = options.version;
        return _this;
    }
    /**
     * Constructs a service URL by formatting the parameterized service URL.
     *
     * The parameterized service URL is:
     * 'https://{region}.ml.cloud.ibm.com'
     *
     * The default variable values are:
     * - 'region': 'us-south'
     *
     * @param {Map<string, string>} | null providedUrlVariables Map from variable names to desired values.
     *  If a variable is not provided in this map,
     *  the default variable value will be used instead.
     * @returns {string} The formatted URL with all variable placeholders replaced by values.
     */
    WatsonxAiMlVmlv1.constructServiceUrl = function (providedUrlVariables) {
        return (0, ibm_cloud_sdk_core_1.constructServiceUrl)(WatsonxAiMlVmlv1.PARAMETERIZED_SERVICE_URL, WatsonxAiMlVmlv1.defaultUrlVariables, providedUrlVariables);
    };
    /*************************
     * Factory method
     ************************/
    /**
     * Constructs an instance of WatsonxAiMlVmlv1 with passed in options and external configuration.
     *
     * @param {UserOptions} [options] - The parameters to send to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
     * @param {string} [options.serviceUrl] - The base URL for the service
     * @returns {WatsonxAiMlVmlv1}
     *
     *
     * @category constructor
     *
     */
    WatsonxAiMlVmlv1.newInstance = function (options) {
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = this.DEFAULT_SERVICE_NAME;
        }
        if (!options.authenticator) {
            options.authenticator = (0, get_authenticator_from_environment_1.getAuthenticatorFromEnvironment)(options.serviceName);
        }
        if (!options.platformUrl) {
            options.platformUrl = (0, ibm_cloud_sdk_core_1.readExternalSources)(options.serviceName).platformUrl;
        }
        var service = new WatsonxAiMlVmlv1(options);
        service.configureService(options.serviceName);
        if (options.serviceUrl) {
            service.setServiceUrl(options.serviceUrl);
        }
        return service;
    };
    /*************************
     * deployments
     ************************/
    /**
     * Create a new watsonx.ai deployment.
     *
     * Create a new deployment, currently the only supported type is `online`. If this is a deployment for a prompt tune
     * then the `asset` object must exist and the `id` must be the `id` of the `model` that was created after the prompt
     * training. If this is a deployment for a prompt template then the `prompt_template` object should exist and the `id`
     * must be the `id` of the prompt template to be deployed.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - The name of the resource.
     * @param {OnlineDeployment} params.online - Indicates that this is an online deployment. An object has to be
     * specified but can be empty.
     * The `serving_name` can be provided in the `online.parameters`.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id` has
     * to be given.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` has to
     * be given.
     * @param {string} [params.description] - A description of the resource.
     * @param {string[]} [params.tags] - A list of tags for this resource.
     * @param {JsonObject} [params.custom] - User defined properties specified as key-value pairs.
     * @param {Rel} [params.asset] - A reference to a resource.
     * @param {SimpleRel} [params.promptTemplate] - A reference to a resource.
     * @param {HardwareSpec} [params.hardwareSpec] - A hardware specification.
     * @param {string} [params.baseModelId] - The base model that is required for this deployment if this is for a prompt
     * template or a prompt tune for an IBM foundation model.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.DeploymentResource>>}
     *
     * @category Deployments
     */
    WatsonxAiMlVmlv1.prototype.createDeployment = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['name', 'online'];
        var _validParams = [
            'name',
            'online',
            'projectId',
            'spaceId',
            'description',
            'tags',
            'custom',
            'asset',
            'promptTemplate',
            'hardwareSpec',
            'baseModelId',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'online': _params.online,
            'project_id': _params.projectId,
            'space_id': _params.spaceId,
            'description': _params.description,
            'tags': _params.tags,
            'custom': _params.custom,
            'asset': _params.asset,
            'prompt_template': _params.promptTemplate,
            'hardware_spec': _params.hardwareSpec,
            'base_model_id': _params.baseModelId,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'createDeployment');
        var parameters = {
            options: {
                url: '/ml/v4/deployments',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve the deployments.
     *
     * Retrieve the list of deployments for the specified space or project.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` query
     * parameter has to be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id`
     * query parameter has to be given.
     * @param {string} [params.servingName] - Retrieves the deployment, if any, that contains this `serving_name`.
     * @param {string} [params.tagValue] - Retrieves only the resources with the given tag value.
     * @param {string} [params.assetId] - Retrieves only the resources with the given asset_id, asset_id would be the
     * model id.
     * @param {string} [params.promptTemplateId] - Retrieves only the resources with the given prompt_template_id.
     * @param {string} [params.name] - Retrieves only the resources with the given name.
     * @param {string} [params.type] - Retrieves the resources filtered with the given type. There are the deployment
     * types as well as an additional
     * `prompt_template` if the deployment type includes a prompt template.
     *
     * The supported deployment types are (see the description for `deployed_asset_type` in the deployment entity):
     *
     * 1. `prompt_tune` - when a prompt tuned model is deployed. 2. `foundation_model` - when a prompt template is used on
     * a pre-deployed IBM provided model.
     *
     * These can be combined with the flag `prompt_template` like this:
     *
     * 1. `type=prompt_tune` - return all prompt tuned model deployments. 2. `type=prompt_tune and prompt_template` -
     * return all prompt tuned model deployments with a prompt template. 3. `type=foundation_model` - return all prompt
     * template deployments. 4. `type=foundation_model and prompt_template` - return all prompt template deployments -
     * this is the same as the previous query because a `foundation_model` can only exist with a prompt template. 5.
     * `type=prompt_template` - return all deployments with a prompt template.
     * @param {string} [params.state] - Retrieves the resources filtered by state. Allowed values are `initializing`,
     * `updating`, `ready` and `failed`.
     * @param {boolean} [params.conflict] - Returns whether `serving_name` is available for use or not. This query
     * parameter cannot be combined with any other parameter except for `serving_name`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.DeploymentResourceCollection>>}
     *
     * @category Deployments
     */
    WatsonxAiMlVmlv1.prototype.listDeployments = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'spaceId',
            'projectId',
            'servingName',
            'tagValue',
            'assetId',
            'promptTemplateId',
            'name',
            'type',
            'state',
            'conflict',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
            'serving_name': _params.servingName,
            'tag.value': _params.tagValue,
            'asset_id': _params.assetId,
            'prompt_template_id': _params.promptTemplateId,
            'name': _params.name,
            'type': _params.type,
            'state': _params.state,
            'conflict': _params.conflict,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'listDeployments');
        var parameters = {
            options: {
                url: '/ml/v4/deployments',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve the deployment details.
     *
     * Retrieve the deployment details with the specified identifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.deploymentId - The deployment id.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` query
     * parameter has to be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id`
     * query parameter has to be given.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.DeploymentResource>>}
     *
     * @category Deployments
     */
    WatsonxAiMlVmlv1.prototype.deploymentsGet = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['deploymentId'];
        var _validParams = ['deploymentId', 'spaceId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var path = {
            'deployment_id': _params.deploymentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deploymentsGet');
        var parameters = {
            options: {
                url: '/ml/v4/deployments/{deployment_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update the deployment metadata.
     *
     * Update the deployment metadata. The following parameters of deployment metadata are supported for the patch
     * operation.
     *
     * - `/name`
     * - `/description`
     * - `/tags`
     * - `/custom`
     * - `/online/parameters`
     * - `/asset`
     * - `/prompt_template`
     * - `/hardware_spec`
     *
     * The PATCH operation with path specified as `/online/parameters` can be used to update the `serving_name`.
     *
     * Patching `/asset` or `/prompt_template` should normally be used in the case when these fields already exist.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.deploymentId - The deployment id.
     * @param {JsonPatchOperation[]} params.jsonPatch - The json patch.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` query
     * parameter has to be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id`
     * query parameter has to be given.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.DeploymentResource>>}
     *
     * @category Deployments
     */
    WatsonxAiMlVmlv1.prototype.deploymentsUpdate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['deploymentId', 'jsonPatch'];
        var _validParams = ['deploymentId', 'jsonPatch', 'spaceId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = _params.jsonPatch;
        var query = {
            'version': this.version,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var path = {
            'deployment_id': _params.deploymentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deploymentsUpdate');
        var parameters = {
            options: {
                url: '/ml/v4/deployments/{deployment_id}',
                method: 'PATCH',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json-patch+json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete the deployment.
     *
     * Delete the deployment with the specified identifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.deploymentId - The deployment id.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` query
     * parameter has to be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id`
     * query parameter has to be given.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Deployments
     */
    WatsonxAiMlVmlv1.prototype.deploymentsDelete = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['deploymentId'];
        var _validParams = ['deploymentId', 'spaceId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var path = {
            'deployment_id': _params.deploymentId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deploymentsDelete');
        var parameters = {
            options: {
                url: '/ml/v4/deployments/{deployment_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Infer text.
     *
     * Infer the next tokens for a given deployed model with a set of parameters. If a `serving_name` is used then it must
     * match the `serving_name` that is returned in the `inference` when the deployment was created.
     *
     * ### Return options
     *
     * Note that there is currently a limitation in this operation when using `return_options`, for input only
     * `input_text` will be returned if requested, for output the `input_tokens` and `generated_tokens` will not be
     * returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.idOrName - The `id_or_name` can be either the `deployment_id` that identifies the deployment
     * or a `serving_name` that allows a predefined URL to be used to post a prediction.
     *
     * The `project` or `space` for the deployment must have a WML instance that will be used for limits and billing (if a
     * paid plan).
     * @param {string} [params.input] - The prompt to generate completions. Note: The method tokenizes the input
     * internally. It is recommended not to leave any trailing spaces.
     *
     *
     * This field is ignored if there is a prompt template.
     * @param {DeploymentTextGenProperties} [params.parameters] - The template properties if this request refers to a
     * prompt template.
     * @param {Moderations} [params.moderations] - Properties that control the moderations, for usages such as `Hate and
     * profanity` (HAP) and `Personal identifiable information` (PII) filtering. This list can be extended with new types
     * of moderations.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TextGenResponse>>}
     *
     * @category Deployments
     */
    WatsonxAiMlVmlv1.prototype.deploymentsTextGeneration = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['idOrName'];
        var _validParams = ['idOrName', 'input', 'parameters', 'moderations', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'parameters': _params.parameters,
            'moderations': _params.moderations,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'id_or_name': _params.idOrName,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deploymentsTextGeneration');
        var parameters = {
            options: {
                url: '/ml/v1/deployments/{id_or_name}/text/generation',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Infer text event stream.
     *
     * Infer the next tokens for a given deployed model with a set of parameters. This operation will return the output
     * tokens as a stream of events. If a `serving_name` is used then it must match the `serving_name` that is returned in
     * the `inference` when the deployment was created.
     *
     * ### Return options
     *
     * Note that there is currently a limitation in this operation when using `return_options`, for input only
     * `input_text` will be returned if requested, for output the `input_tokens` and `generated_tokens` will not be
     * returned, also the
     * `rank` and `top_tokens` will not be returned.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.idOrName - The `id_or_name` can be either the `deployment_id` that identifies the deployment
     * or a `serving_name` that allows a predefined URL to be used to post a prediction.
     *
     * The `project` or `space` for the deployment must have a WML instance that will be used for limits and billing (if a
     * paid plan).
     * @param {string} [params.input] - The prompt to generate completions. Note: The method tokenizes the input
     * internally. It is recommended not to leave any trailing spaces.
     *
     *
     * This field is ignored if there is a prompt template.
     * @param {DeploymentTextGenProperties} [params.parameters] - The template properties if this request refers to a
     * prompt template.
     * @param {Moderations} [params.moderations] - Properties that control the moderations, for usages such as `Hate and
     * profanity` (HAP) and `Personal identifiable information` (PII) filtering. This list can be extended with new types
     * of moderations.
     * @param {string} [params.accept] - The type of the response: application/json or text/event-stream. A character
     * encoding can be specified by including a `charset` parameter. For example, 'text/event-stream;charset=utf-8'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TextGenResponse[]>>}
     *
     * @category Deployments
     */
    WatsonxAiMlVmlv1.prototype.deploymentsTextGenerationStream = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['idOrName'];
        var _validParams = ['idOrName', 'input', 'parameters', 'moderations', 'accept', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'parameters': _params.parameters,
            'moderations': _params.moderations,
        };
        var query = {
            'version': this.version,
        };
        var path = {
            'id_or_name': _params.idOrName,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deploymentsTextGenerationStream');
        var parameters = {
            options: {
                url: '/ml/v1/deployments/{id_or_name}/text/generation_stream',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                    'Accept': _params.accept,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * foundationModelSpecs
     ************************/
    /**
     * List the available foundation models.
     *
     * Retrieve the list of deployed foundation models.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.start] - Token required for token-based pagination. This token cannot be determined by end
     * user. It is generated by the service and it is set in the href available in the `next` field.
     * @param {number} [params.limit] - How many resources should be returned. By default limit is 100. Max limit allowed
     * is 200.
     * @param {string} [params.filters] - A set of filters to specify the list of models, filters are described as the
     * `pattern` shown below.
     * ```text
     *  pattern: tfilter[,tfilter][:(or|and)]
     *  tfilter: filter | !filter
     *    filter: Requires existence of the filter.
     *    !filter: Requires absence of the filter.
     *  filter: one of
     *    modelid_*:   Filters by model id.
     *                 Namely, select a model with a specific model id.
     *    provider_*:  Filters by provider.
     *                 Namely, select all models with a specific provider.
     *    source_*:    Filters by source.
     *                 Namely, select all models with a specific source.
     *    tier_*:      Filters by tier.
     *                 Namely, select all models with a specific tier.
     *    task_*:      Filters by task id.
     *                 Namely, select all models that support a specific task id.
     *    lifecycle_*: Filters by lifecycle state.
     *                 Namely, select all models that are currently in the specified lifecycle state.
     *    function_*:  Filters by function.
     *                 Namely, select all models that support a specific function.
     * ```.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.FoundationModels>>}
     *
     * @category Foundation Model Specs
     */
    WatsonxAiMlVmlv1.prototype.listFoundationModelSpecs = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = ['start', 'limit', 'filters', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'start': _params.start,
            'limit': _params.limit,
            'filters': _params.filters,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'listFoundationModelSpecs');
        var parameters = {
            options: {
                url: '/ml/v1/foundation_model_specs',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List the supported tasks.
     *
     * Retrieve the list of tasks that are supported by the foundation models.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.start] - Token required for token-based pagination. This token cannot be determined by end
     * user. It is generated by the service and it is set in the href available in the `next` field.
     * @param {number} [params.limit] - How many resources should be returned. By default limit is 100. Max limit allowed
     * is 200.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.FoundationModelTasks>>}
     *
     * @category Foundation Model Specs
     */
    WatsonxAiMlVmlv1.prototype.listFoundationModelTasks = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = ['start', 'limit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'start': _params.start,
            'limit': _params.limit,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'listFoundationModelTasks');
        var parameters = {
            options: {
                url: '/ml/v1/foundation_model_tasks',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * notebooks
     ************************/
    /**
     * Create a new notebook.
     *
     * Create a new notebook
     * - either from scratch
     * - or by copying another notebook.
     *
     * To create a notebook from scratch, you need to first upload the notebook content(`ipynb` format) to the project
     * Cloud Object Storage (COS) and then reference it with the attribute `file_reference`. The other required attributes
     * are `name`, `project` and `runtime`.  The attribute `runtime` is used to specify the environment on which the
     * notebook runs.
     *
     * To copy a notebook, you only need to provide `name` and `source_guid` in the request body.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NotebooksCreateRequest} params.notebooksCreateRequest - Specification of the notebook to be created.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.NotebooksCreateResponse>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.notebooksCreate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebooksCreateRequest'];
        var _validParams = ['notebooksCreateRequest', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = _params.notebooksCreateRequest;
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'notebooksCreate');
        var parameters = {
            options: {
                url: '/v2/notebooks',
                method: 'POST',
                body: body,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve the details of a large number of notebooks inside a project.
     *
     * Retrieve the details of a large number of notebooks inside a project.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.projectId - The guid of the project.
     * @param {string} params.include - Additional info that will be included into the notebook details. Possible values
     * are:
     * - runtime.
     * @param {string[]} [params.notebooks] - The list of notebooks whose details will be retrieved.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.NotebooksResourceList>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.notebooksList = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['projectId', 'include'];
        var _validParams = ['projectId', 'include', 'notebooks', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'notebooks': _params.notebooks,
        };
        var query = {
            'project_id': _params.projectId,
            'include': _params.include,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'notebooksList');
        var parameters = {
            options: {
                url: '/v2/notebooks/list',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a particular notebook, including the notebook asset.
     *
     * Delete a particular notebook, including the notebook asset.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.notebookGuid - The guid of the notebook.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.notebooksDelete = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebookGuid'];
        var _validParams = ['notebookGuid', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'notebook_guid': _params.notebookGuid,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'notebooksDelete');
        var parameters = {
            options: {
                url: '/v2/notebooks/{notebook_guid}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Revert the main notebook to a version.
     *
     * Revert the main notebook to a version.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.notebookGuid - The guid of the main notebook.
     * @param {string} params.source - The guid of the notebook version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.NotebooksRevertResponse>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.notebooksRevert = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebookGuid', 'source'];
        var _validParams = ['notebookGuid', 'source', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'source': _params.source,
        };
        var path = {
            'notebook_guid': _params.notebookGuid,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'notebooksRevert');
        var parameters = {
            options: {
                url: '/v2/notebooks/{notebook_guid}',
                method: 'PUT',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a particular notebook.
     *
     * Update a particular notebook.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.notebookGuid - The guid of the notebook.
     * @param {string} [params.environment] - The guid of the environment on which the notebook runs.
     * @param {boolean} [params.sparkMonitoringEnabled] - Spark monitoring enabled or not.
     * @param {NotebookKernel} [params.kernel] - A notebook kernel.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.Notebook>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.notebooksUpdate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebookGuid'];
        var _validParams = [
            'notebookGuid',
            'environment',
            'sparkMonitoringEnabled',
            'kernel',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'environment': _params.environment,
            'spark_monitoring_enabled': _params.sparkMonitoringEnabled,
            'kernel': _params.kernel,
        };
        var path = {
            'notebook_guid': _params.notebookGuid,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'notebooksUpdate');
        var parameters = {
            options: {
                url: '/v2/notebooks/{notebook_guid}',
                method: 'PATCH',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * notebookVersions
     ************************/
    /**
     * Create a new version.
     *
     * Create a version of a given notebook.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.notebookGuid - The guid of the notebook.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.VersionsCreateResponse>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.versionsCreate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebookGuid'];
        var _validParams = ['notebookGuid', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'notebook_guid': _params.notebookGuid,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'versionsCreate');
        var parameters = {
            options: {
                url: '/v2/notebooks/{notebook_guid}/versions',
                method: 'POST',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * List the versions of a notebook.
     *
     * List all versions of a particular notebook.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.notebookGuid - The guid of the notebook.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.VersionsListResponse>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.versionsList = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebookGuid'];
        var _validParams = ['notebookGuid', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'notebook_guid': _params.notebookGuid,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'versionsList');
        var parameters = {
            options: {
                url: '/v2/notebooks/{notebook_guid}/versions',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve a notebook version.
     *
     * Retrieve a particular version of a notebook.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.notebookGuid - The guid of the notebook.
     * @param {string} params.versionGuid - The guid of the version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.VersionsGetResponse>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.versionsGet = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebookGuid', 'versionGuid'];
        var _validParams = ['notebookGuid', 'versionGuid', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'notebook_guid': _params.notebookGuid,
            'version_guid': _params.versionGuid,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'versionsGet');
        var parameters = {
            options: {
                url: '/v2/notebooks/{notebook_guid}/versions/{version_guid}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a notebook version.
     *
     * Delete a particular version of a given notebook.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.notebookGuid - The guid of the notebook.
     * @param {string} params.versionGuid - The guid of the version.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Notebooks
     */
    WatsonxAiMlVmlv1.prototype.versionsDelete = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['notebookGuid', 'versionGuid'];
        var _validParams = ['notebookGuid', 'versionGuid', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var path = {
            'notebook_guid': _params.notebookGuid,
            'version_guid': _params.versionGuid,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'versionsDelete');
        var parameters = {
            options: {
                url: '/v2/notebooks/{notebook_guid}/versions/{version_guid}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * prompts
     ************************/
    /**
     * Create a new prompt / prompt template.
     *
     * This creates a new prompt with the provided parameters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Name used to display the prompt.
     * @param {PromptWithExternal} params.prompt -
     * @param {string} [params.description] - An optional description for the prompt.
     * @param {number} [params.createdAt] - Time the prompt was created.
     * @param {string[]} [params.taskIds] -
     * @param {PromptLock} [params.lock] -
     * @param {WxPromptPostModelVersion} [params.modelVersion] -
     * @param {JsonObject} [params.promptVariables] -
     * @param {string} [params.inputMode] - Input mode in use for the prompt.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptResponse>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.postPrompt = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['name', 'prompt'];
        var _validParams = [
            'name',
            'prompt',
            'description',
            'createdAt',
            'taskIds',
            'lock',
            'modelVersion',
            'promptVariables',
            'inputMode',
            'projectId',
            'spaceId',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'prompt': _params.prompt,
            'description': _params.description,
            'created_at': _params.createdAt,
            'task_ids': _params.taskIds,
            'lock': _params.lock,
            'model_version': _params.modelVersion,
            'prompt_variables': _params.promptVariables,
            'input_mode': _params.inputMode,
        };
        var query = {
            'project_id': _params.projectId,
            'space_id': _params.spaceId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'postPrompt');
        var parameters = {
            options: {
                url: '/v1/prompts',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a prompt.
     *
     * This retrieves a prompt / prompt template with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.promptId - Prompt ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {string} [params.restrictModelParameters] - Only return a set of model parameters compatiable with
     * inferencing.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptResponse>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.getPrompt = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['promptId'];
        var _validParams = ['promptId', 'projectId', 'spaceId', 'restrictModelParameters', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
            'space_id': _params.spaceId,
            'restrict_model_parameters': _params.restrictModelParameters,
        };
        var path = {
            'prompt_id': _params.promptId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'getPrompt');
        var parameters = {
            options: {
                url: '/v1/prompts/{prompt_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a prompt.
     *
     * This updates a prompt / prompt template with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.promptId - Prompt ID.
     * @param {string} params.name - Name used to display the prompt.
     * @param {Prompt} params.prompt -
     * @param {string} [params.id] - The prompt's id. This value cannot be set. It is returned in responses only.
     * @param {string} [params.description] - An optional description for the prompt.
     * @param {string[]} [params.taskIds] -
     * @param {boolean} [params.governanceTracked] -
     * @param {WxPromptPatchModelVersion} [params.modelVersion] -
     * @param {JsonObject} [params.promptVariable] -
     * @param {string} [params.inputMode] - Input mode in use for the prompt.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptResponse>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.patchPrompt = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['promptId', 'name', 'prompt'];
        var _validParams = [
            'promptId',
            'name',
            'prompt',
            'id',
            'description',
            'taskIds',
            'governanceTracked',
            'modelVersion',
            'promptVariable',
            'inputMode',
            'projectId',
            'spaceId',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'prompt': _params.prompt,
            'id': _params.id,
            'description': _params.description,
            'task_ids': _params.taskIds,
            'governance_tracked': _params.governanceTracked,
            'model_version': _params.modelVersion,
            'prompt_variable': _params.promptVariable,
            'input_mode': _params.inputMode,
        };
        var query = {
            'project_id': _params.projectId,
            'space_id': _params.spaceId,
        };
        var path = {
            'prompt_id': _params.promptId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'patchPrompt');
        var parameters = {
            options: {
                url: '/v1/prompts/{prompt_id}',
                method: 'PATCH',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a prompt.
     *
     * This delets a prompt / prompt template with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.promptId - Prompt ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.deletePrompt = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['promptId'];
        var _validParams = ['promptId', 'projectId', 'spaceId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
            'space_id': _params.spaceId,
        };
        var path = {
            'prompt_id': _params.promptId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deletePrompt');
        var parameters = {
            options: {
                url: '/v1/prompts/{prompt_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Prompt lock modifications.
     *
     * Modifies the current locked state of a prompt.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.promptId - Prompt ID.
     * @param {boolean} params.locked - True if the prompt is currently locked.
     * @param {string} [params.lockType] - Lock type: 'edit' for working on prompts/templates or 'governance'. Can only be
     * supplied in PUT /lock requests.
     * @param {string} [params.lockedBy] - Locked by is computed by the server and shouldn't be passed.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {boolean} [params.force] - Override a lock if it is currently taken.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.PromptLock>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.putPromptLock = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['promptId', 'locked'];
        var _validParams = [
            'promptId',
            'locked',
            'lockType',
            'lockedBy',
            'projectId',
            'spaceId',
            'force',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'locked': _params.locked,
            'lock_type': _params.lockType,
            'locked_by': _params.lockedBy,
        };
        var query = {
            'project_id': _params.projectId,
            'space_id': _params.spaceId,
            'force': _params.force,
        };
        var path = {
            'prompt_id': _params.promptId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'putPromptLock');
        var parameters = {
            options: {
                url: '/v1/prompts/{prompt_id}/lock',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get current prompt lock status.
     *
     * Retrieves the current locked state of a prompt.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.promptId - Prompt ID.
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.PromptLock>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.getPromptLock = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['promptId'];
        var _validParams = ['promptId', 'spaceId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var path = {
            'prompt_id': _params.promptId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'getPromptLock');
        var parameters = {
            options: {
                url: '/v1/prompts/{prompt_id}/lock',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get the inference input string for a given prompt.
     *
     * Computes the inference input string based on state of a prompt. Optionally replaces template params.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.promptId - Prompt ID.
     * @param {string} [params.input] - Override input string that will be used to generate the response. The string can
     * contain template parameters.
     * @param {JsonObject} [params.promptVariable] - Supply only to replace placeholders. Object content must be key:value
     * pairs where the 'key' is the parameter to replace and 'value' is the value to use.
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.GetPromptInputResponse>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.getPromptInput = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['promptId'];
        var _validParams = ['promptId', 'input', 'promptVariable', 'spaceId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'prompt_variable': _params.promptVariable,
        };
        var query = {
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var path = {
            'prompt_id': _params.promptId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'getPromptInput');
        var parameters = {
            options: {
                url: '/v1/prompts/{prompt_id}/input',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add a new chat item to a prompt.
     *
     * This adds new chat items to the given prompt.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.promptId - Prompt ID.
     * @param {ChatItem[]} params.chatItem -
     * @param {string} [params.spaceId] - [REQUIRED] Specifies the space ID as the target. One target must be supplied per
     * request.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Prompts / Prompt Templates
     */
    WatsonxAiMlVmlv1.prototype.postPromptChatItem = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['promptId', 'chatItem'];
        var _validParams = ['promptId', 'chatItem', 'spaceId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = _params.chatItem;
        var query = {
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var path = {
            'prompt_id': _params.promptId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'postPromptChatItem');
        var parameters = {
            options: {
                url: '/v1/prompts/{prompt_id}/chat_items',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * promptSessions
     ************************/
    /**
     * Create a new prompt session.
     *
     * This creates a new prompt session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - Name used to display the prompt session.
     * @param {string} [params.id] - The prompt session's id. This value cannot be set. It is returned in responses only.
     * @param {string} [params.description] - An optional description for the prompt session.
     * @param {number} [params.createdAt] - Time the session was created.
     * @param {string} [params.createdBy] - The ID of the original session creator.
     * @param {number} [params.lastUpdatedAt] - Time the session was updated.
     * @param {string} [params.lastUpdatedBy] - The ID of the last user that modifed the session.
     * @param {PromptLock} [params.lock] -
     * @param {WxPromptSessionEntry[]} [params.prompts] -
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptResponse>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.postPromptSession = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['name'];
        var _validParams = [
            'name',
            'id',
            'description',
            'createdAt',
            'createdBy',
            'lastUpdatedAt',
            'lastUpdatedBy',
            'lock',
            'prompts',
            'projectId',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'id': _params.id,
            'description': _params.description,
            'created_at': _params.createdAt,
            'created_by': _params.createdBy,
            'last_updated_at': _params.lastUpdatedAt,
            'last_updated_by': _params.lastUpdatedBy,
            'lock': _params.lock,
            'prompts': _params.prompts,
        };
        var query = {
            'project_id': _params.projectId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'postPromptSession');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a prompt session.
     *
     * This retrieves a prompt session with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {boolean} [params.prefetch] - Include the most recent entry.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptSession>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.getPromptSession = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId'];
        var _validParams = ['sessionId', 'projectId', 'prefetch', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
            'prefetch': _params.prefetch,
        };
        var path = {
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'getPromptSession');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Update a prompt session.
     *
     * This updates a prompt session with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} [params.name] -
     * @param {string} [params.description] - An optional description for the prompt.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptSession>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.patchPromptSession = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId'];
        var _validParams = ['sessionId', 'name', 'description', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
        };
        var query = {
            'project_id': _params.projectId,
        };
        var path = {
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'patchPromptSession');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}',
                method: 'PATCH',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a prompt session.
     *
     * This deletes a prompt session with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.deletePromptSession = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId'];
        var _validParams = ['sessionId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
        };
        var path = {
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deletePromptSession');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add a new prompt to a prompt session.
     *
     * This creates a new prompt associated with the given session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} params.name - Name used to display the prompt.
     * @param {number} params.createdAt - Time the prompt was created.
     * @param {Prompt} params.prompt -
     * @param {string} [params.id] - The prompt's id. This value cannot be set. It is returned in responses only.
     * @param {string} [params.description] - An optional description for the prompt.
     * @param {JsonObject} [params.promptVariables] -
     * @param {boolean} [params.isTemplate] -
     * @param {string} [params.inputMode] - Input mode in use for the prompt.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptSessionEntry>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.postPromptSessionEntry = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId', 'name', 'createdAt', 'prompt'];
        var _validParams = [
            'sessionId',
            'name',
            'createdAt',
            'prompt',
            'id',
            'description',
            'promptVariables',
            'isTemplate',
            'inputMode',
            'projectId',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'created_at': _params.createdAt,
            'prompt': _params.prompt,
            'id': _params.id,
            'description': _params.description,
            'prompt_variables': _params.promptVariables,
            'is_template': _params.isTemplate,
            'input_mode': _params.inputMode,
        };
        var query = {
            'project_id': _params.projectId,
        };
        var path = {
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'postPromptSessionEntry');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}/entries',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get entries for a prompt session.
     *
     * List entries from a given session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {string} [params.bookmark] - Bookmark from a previously limited get request.
     * @param {string} [params.limit] - Limit for results to retrieve, default 20.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptSessionEntryList>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.getPromptSessionEntries = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId'];
        var _validParams = ['sessionId', 'projectId', 'bookmark', 'limit', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
            'bookmark': _params.bookmark,
            'limit': _params.limit,
        };
        var path = {
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'getPromptSessionEntries');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}/entries',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Add a new chat item to a prompt session entry.
     *
     * This adds new chat items to the given entry.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} params.entryId - Prompt Session Entry ID.
     * @param {ChatItem[]} params.chatItem -
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.postPromptSessionEntryChatItem = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId', 'entryId', 'chatItem'];
        var _validParams = ['sessionId', 'entryId', 'chatItem', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = _params.chatItem;
        var query = {
            'project_id': _params.projectId,
        };
        var path = {
            'session_id': _params.sessionId,
            'entry_id': _params.entryId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'postPromptSessionEntryChatItem');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}/entries/{entry_id}/chat_items',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Prompt session lock modifications.
     *
     * Modifies the current locked state of a prompt session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {boolean} params.locked - True if the prompt is currently locked.
     * @param {string} [params.lockType] - Lock type: 'edit' for working on prompts/templates or 'governance'. Can only be
     * supplied in PUT /lock requests.
     * @param {string} [params.lockedBy] - Locked by is computed by the server and shouldn't be passed.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {boolean} [params.force] - Override a lock if it is currently taken.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.PromptLock>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.putPromptSessionLock = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId', 'locked'];
        var _validParams = [
            'sessionId',
            'locked',
            'lockType',
            'lockedBy',
            'projectId',
            'force',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'locked': _params.locked,
            'lock_type': _params.lockType,
            'locked_by': _params.lockedBy,
        };
        var query = {
            'project_id': _params.projectId,
            'force': _params.force,
        };
        var path = {
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'putPromptSessionLock');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}/lock',
                method: 'PUT',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get current prompt session lock status.
     *
     * Retrieves the current locked state of a prompt session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.PromptLock>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.getPromptSessionLock = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId'];
        var _validParams = ['sessionId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
        };
        var path = {
            'session_id': _params.sessionId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'getPromptSessionLock');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}/lock',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Get a prompt session entry.
     *
     * This retrieves a prompt session entry with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} params.entryId - Prompt Session Entry ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.WxPromptResponse>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.getPromptSessionEntry = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId', 'entryId'];
        var _validParams = ['sessionId', 'entryId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
        };
        var path = {
            'session_id': _params.sessionId,
            'entry_id': _params.entryId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'getPromptSessionEntry');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}/entries/{entry_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Delete a prompt session entry.
     *
     * This deletes a prompt session entry with the given id.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.sessionId - Prompt Session ID.
     * @param {string} params.entryId - Prompt Session Entry ID.
     * @param {string} [params.projectId] - [REQUIRED] Specifies the project ID as the target. One target must be supplied
     * per request.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Prompt Sessions
     */
    WatsonxAiMlVmlv1.prototype.deletePromptSessionEntry = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['sessionId', 'entryId'];
        var _validParams = ['sessionId', 'entryId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'project_id': _params.projectId,
        };
        var path = {
            'session_id': _params.sessionId,
            'entry_id': _params.entryId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'deletePromptSessionEntry');
        var parameters = {
            options: {
                url: '/v1/prompt_sessions/{session_id}/entries/{entry_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                serviceUrl: this.wxServiceUrl,
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * textEmbeddings
     ************************/
    /**
     * Generate embeddings.
     *
     * Generate embeddings from text input.
     *
     * See the
     * [documentation](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-embed-overview.html?context=wx&audience=wdp)
     * for a description of text embeddings.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - The `id` of the model to be used for this request. Please refer to the [list of
     * models](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models-embed.html?context=wx&audience=wdp).
     * @param {string[]} params.inputs - The input text.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` has to
     * be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id` has
     * to be given.
     * @param {EmbeddingParameters} [params.parameters] - Parameters for text embedding requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmbeddingsResponse>>}
     *
     * @category Embeddings
     */
    WatsonxAiMlVmlv1.prototype.textEmbeddings = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['modelId', 'inputs'];
        var _validParams = ['modelId', 'inputs', 'spaceId', 'projectId', 'parameters', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'model_id': _params.modelId,
            'inputs': _params.inputs,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
            'parameters': _params.parameters,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'textEmbeddings');
        var parameters = {
            options: {
                url: '/ml/v1/text/embeddings',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * textGeneration
     ************************/
    /**
     * Infer text.
     *
     * Infer the next tokens for a given deployed model with a set of parameters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.input - The prompt to generate completions. Note: The method tokenizes the input internally.
     * It is recommended not to leave any trailing spaces.
     * @param {string} params.modelId - The `id` of the model to be used for this request. Please refer to the [list of
     * models](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx).
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` has to
     * be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id` has
     * to be given.
     * @param {TextGenRequestParameters} [params.parameters] - The chat related parameters.
     * @param {Moderations} [params.moderations] - Properties that control the moderations, for usages such as `Hate and
     * profanity` (HAP) and `Personal identifiable information` (PII) filtering. This list can be extended with new types
     * of moderations.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TextGenResponse>>}
     *
     * @category Text Generation
     */
    WatsonxAiMlVmlv1.prototype.textGeneration = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['input', 'modelId'];
        var _validParams = [
            'input',
            'modelId',
            'spaceId',
            'projectId',
            'parameters',
            'moderations',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'model_id': _params.modelId,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
            'parameters': _params.parameters,
            'moderations': _params.moderations,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'textGeneration');
        var parameters = {
            options: {
                url: '/ml/v1/text/generation',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Infer text event stream.
     *
     * Infer the next tokens for a given deployed model with a set of parameters. This operation will return the output
     * tokens as a stream of events.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.input - The prompt to generate completions. Note: The method tokenizes the input internally.
     * It is recommended not to leave any trailing spaces.
     * @param {string} params.modelId - The `id` of the model to be used for this request. Please refer to the [list of
     * models](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx).
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` has to
     * be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id` has
     * to be given.
     * @param {TextGenRequestParameters} [params.parameters] - The chat related parameters.
     * @param {Moderations} [params.moderations] - Properties that control the moderations, for usages such as `Hate and
     * profanity` (HAP) and `Personal identifiable information` (PII) filtering. This list can be extended with new types
     * of moderations.
     * @param {string} [params.accept] - The type of the response: application/json or text/event-stream. A character
     * encoding can be specified by including a `charset` parameter. For example, 'text/event-stream;charset=utf-8'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TextGenResponse[]>>}
     *
     * @category Text Generation
     */
    WatsonxAiMlVmlv1.prototype.textGenerationStream = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['input', 'modelId'];
        var _validParams = [
            'input',
            'modelId',
            'spaceId',
            'projectId',
            'parameters',
            'moderations',
            'accept',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'input': _params.input,
            'model_id': _params.modelId,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
            'parameters': _params.parameters,
            'moderations': _params.moderations,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'textGenerationStream');
        var parameters = {
            options: {
                url: '/ml/v1/text/generation_stream',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Content-Type': 'application/json',
                    'Accept': _params.accept,
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * tokenization
     ************************/
    /**
     * Text tokenization.
     *
     * The text tokenize operation allows you to check the conversion of provided input to tokens for a given model. It
     * splits text into words or sub-words, which then are converted to ids through a look-up table (vocabulary).
     * Tokenization allows the model to have a reasonable vocabulary size.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - The `id` of the model to be used for this request. Please refer to the [list of
     * models](https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx).
     * @param {string} params.input - The input string to tokenize.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` has to
     * be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id` has
     * to be given.
     * @param {TextTokenizeParameters} [params.parameters] - The parameters for text tokenization.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TextTokenizeResponse>>}
     *
     * @category Tokenization
     */
    WatsonxAiMlVmlv1.prototype.textTokenization = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['modelId', 'input'];
        var _validParams = ['modelId', 'input', 'spaceId', 'projectId', 'parameters', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'model_id': _params.modelId,
            'input': _params.input,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
            'parameters': _params.parameters,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'textTokenization');
        var parameters = {
            options: {
                url: '/ml/v1/text/tokenization',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /*************************
     * trainings
     ************************/
    /**
     * Create a new watsonx.ai training.
     *
     * Create a new watsonx.ai training in a project or a space.
     *
     * The details of the base model and parameters for the training must be provided in the `prompt_tuning` object.
     *
     *
     * In order to deploy the tuned model you need to follow the following steps:
     *
     *   1. Create a WML model asset, in a space or a project,
     *      by providing the `request.json` as shown below:
     *        ```
     *        curl -X POST 'https://{cpd_cluster}/ml/v4/models?version=2024-01-29' \
     *          -H 'Authorization: Bearer <replace with your token>' \
     *          -H 'content-type: application/json' \
     *          --data '{
     *             'name': 'replace_with_a_meaningful_name',
     *             'space_id': 'replace_with_your_space_id',
     *             'type': 'prompt_tune_1.0',
     *             'software_spec': {
     *               'name': 'watsonx-textgen-fm-1.0'
     *             },
     *             'metrics': [ from the training job ],
     *             'training': {
     *               'id': '05859469-b25b-420e-aefe-4a5cb6b595eb',
     *               'base_model': {
     *                 'model_id': 'google/flan-t5-xl'
     *               },
     *               'task_id': 'generation',
     *               'verbalizer': 'Input: {{input}} Output:'
     *             },
     *             'training_data_references': [
     *               {
     *                 'connection': {
     *                   'id': '20933468-7e8a-4706-bc90-f0a09332b263'
     *                 },
     *                 'id': 'file_to_tune1.json',
     *                 'location': {
     *                   'bucket': 'wxproject-donotdelete-pr-xeyivy0rx3vrbl',
     *                   'path': 'file_to_tune1.json'
     *                 },
     *                 'type': 'connection_asset'
     *               }
     *             ]
     *           }'
     *        ```
     *
     *
     *        **Notes:**
     *
     *        1. If you used the training request field `auto_update_model: true`
     *        then you can skip this step as the model will have been saved at
     *        the end of the training job.
     *        1. Rather than creating the payload for the model you can use the
     *           generated `request.json` that was stored in the `results_reference`
     *           field, look for the path in the field
     *           `entity.results_reference.location.model_request_path`.
     *        1. The model `type` must be `prompt_tune_1.0`.
     *        1. The software spec name must be `watsonx-textgen-fm-1.0`.
     *
     *   1. Create a tuned model deployment as described in the
     *      [create deployment documentation](#create-deployment).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - The name of the training.
     * @param {ObjectLocation} params.resultsReference - The training results. Normally this is specified as
     * `type=container` which means that it is stored in the space or project.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` has to
     * be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id` has
     * to be given.
     * @param {string} [params.description] - A description of the training.
     * @param {string[]} [params.tags] - A list of tags for this resource.
     * @param {PromptTuning} [params.promptTuning] - Properties to control the prompt tuning.
     * @param {DataConnectionReference[]} [params.trainingDataReferences] - Training datasets.
     * @param {JsonObject} [params.custom] - User defined properties specified as key-value pairs.
     * @param {boolean} [params.autoUpdateModel] - If set to `true` then the result of the training, if successful, will
     * be uploaded to the repository as a model.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TrainingResource>>}
     *
     * @category Trainings
     */
    WatsonxAiMlVmlv1.prototype.trainingsCreate = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['name', 'resultsReference'];
        var _validParams = [
            'name',
            'resultsReference',
            'spaceId',
            'projectId',
            'description',
            'tags',
            'promptTuning',
            'trainingDataReferences',
            'custom',
            'autoUpdateModel',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var body = {
            'name': _params.name,
            'results_reference': _params.resultsReference,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
            'description': _params.description,
            'tags': _params.tags,
            'prompt_tuning': _params.promptTuning,
            'training_data_references': _params.trainingDataReferences,
            'custom': _params.custom,
            'auto_update_model': _params.autoUpdateModel,
        };
        var query = {
            'version': this.version,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'trainingsCreate');
        var parameters = {
            options: {
                url: '/ml/v4/trainings',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve the list of trainings.
     *
     * Retrieve the list of trainings for the specified space or project.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.start] - Token required for token-based pagination. This token cannot be determined by end
     * user. It is generated by the service and it is set in the href available in the `next` field.
     * @param {number} [params.limit] - How many resources should be returned. By default limit is 100. Max limit allowed
     * is 200.
     * @param {boolean} [params.totalCount] - Compute the total count. May have performance impact.
     * @param {string} [params.tagValue] - Return only the resources with the given tag value.
     * @param {string} [params.state] - Filter based on on the training job state.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` query
     * parameter has to be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id`
     * query parameter has to be given.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TrainingResourceCollection>>}
     *
     * @category Trainings
     */
    WatsonxAiMlVmlv1.prototype.trainingsList = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = [];
        var _validParams = [
            'start',
            'limit',
            'totalCount',
            'tagValue',
            'state',
            'spaceId',
            'projectId',
            'headers',
        ];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'start': _params.start,
            'limit': _params.limit,
            'total_count': _params.totalCount,
            'tag.value': _params.tagValue,
            'state': _params.state,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'trainingsList');
        var parameters = {
            options: {
                url: '/ml/v4/trainings',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Retrieve the training.
     *
     * Retrieve the training with the specified identifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.trainingId - The training identifier.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` query
     * parameter has to be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id`
     * query parameter has to be given.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.TrainingResource>>}
     *
     * @category Trainings
     */
    WatsonxAiMlVmlv1.prototype.trainingsGet = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['trainingId'];
        var _validParams = ['trainingId', 'spaceId', 'projectId', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
        };
        var path = {
            'training_id': _params.trainingId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'trainingsGet');
        var parameters = {
            options: {
                url: '/ml/v4/trainings/{training_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /**
     * Cancel the training.
     *
     * Cancel the specified training and remove it.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.trainingId - The training identifier.
     * @param {string} [params.spaceId] - The space that contains the resource. Either `space_id` or `project_id` query
     * parameter has to be given.
     * @param {string} [params.projectId] - The project that contains the resource. Either `space_id` or `project_id`
     * query parameter has to be given.
     * @param {boolean} [params.hardDelete] - Set to true in order to also delete the job metadata information.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<WatsonxAiMlVmlv1.Response<WatsonxAiMlVmlv1.EmptyObject>>}
     *
     * @category Trainings
     */
    WatsonxAiMlVmlv1.prototype.trainingsDelete = function (params) {
        var _params = __assign({}, params);
        var _requiredParams = ['trainingId'];
        var _validParams = ['trainingId', 'spaceId', 'projectId', 'hardDelete', 'headers'];
        var _validationErrors = (0, ibm_cloud_sdk_core_1.validateParams)(_params, _requiredParams, _validParams);
        if (_validationErrors) {
            return Promise.reject(_validationErrors);
        }
        var query = {
            'version': this.version,
            'space_id': _params.spaceId,
            'project_id': _params.projectId,
            'hard_delete': _params.hardDelete,
        };
        var path = {
            'training_id': _params.trainingId,
        };
        var sdkHeaders = (0, common_1.getSdkHeaders)(WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME, 'vml-v1', 'trainingsDelete');
        var parameters = {
            options: {
                url: '/ml/v4/trainings/{training_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    /** @hidden */
    WatsonxAiMlVmlv1.DEFAULT_SERVICE_URL = 'https://us-south.ml.cloud.ibm.com';
    /** @hidden */
    WatsonxAiMlVmlv1.DEFAULT_SERVICE_NAME = 'watsonx_ai';
    /** @hidden */
    WatsonxAiMlVmlv1.PARAMETERIZED_SERVICE_URL = 'https://{region}.ml.cloud.ibm.com';
    /** @hidden */
    WatsonxAiMlVmlv1.defaultUrlVariables = new Map([['region', 'us-south']]);
    return WatsonxAiMlVmlv1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (WatsonxAiMlVmlv1) {
    /** Constants for the `deploymentsTextGenerationStream` operation. */
    var DeploymentsTextGenerationStreamConstants;
    (function (DeploymentsTextGenerationStreamConstants) {
        /** The type of the response: application/json or text/event-stream. A character encoding can be specified by including a `charset` parameter. For example, 'text/event-stream;charset=utf-8'. */
        var Accept;
        (function (Accept) {
            Accept["APPLICATION_JSON"] = "application/json";
            Accept["TEXT_EVENT_STREAM"] = "text/event-stream";
        })(Accept = DeploymentsTextGenerationStreamConstants.Accept || (DeploymentsTextGenerationStreamConstants.Accept = {}));
    })(DeploymentsTextGenerationStreamConstants = WatsonxAiMlVmlv1.DeploymentsTextGenerationStreamConstants || (WatsonxAiMlVmlv1.DeploymentsTextGenerationStreamConstants = {}));
    /** Constants for the `postPrompt` operation. */
    var PostPromptConstants;
    (function (PostPromptConstants) {
        /** Input mode in use for the prompt. */
        var InputMode;
        (function (InputMode) {
            InputMode["STRUCTURED"] = "structured";
            InputMode["FREEFORM"] = "freeform";
            InputMode["CHAT"] = "chat";
            InputMode["DETACHED"] = "detached";
        })(InputMode = PostPromptConstants.InputMode || (PostPromptConstants.InputMode = {}));
    })(PostPromptConstants = WatsonxAiMlVmlv1.PostPromptConstants || (WatsonxAiMlVmlv1.PostPromptConstants = {}));
    /** Constants for the `patchPrompt` operation. */
    var PatchPromptConstants;
    (function (PatchPromptConstants) {
        /** Input mode in use for the prompt. */
        var InputMode;
        (function (InputMode) {
            InputMode["STRUCTURED"] = "structured";
            InputMode["FREEFORM"] = "freeform";
        })(InputMode = PatchPromptConstants.InputMode || (PatchPromptConstants.InputMode = {}));
    })(PatchPromptConstants = WatsonxAiMlVmlv1.PatchPromptConstants || (WatsonxAiMlVmlv1.PatchPromptConstants = {}));
    /** Constants for the `putPromptLock` operation. */
    var PutPromptLockConstants;
    (function (PutPromptLockConstants) {
        /** Lock type: 'edit' for working on prompts/templates or 'governance'. Can only be supplied in PUT /lock requests. */
        var LockType;
        (function (LockType) {
            LockType["EDIT"] = "edit";
            LockType["GOVERNANCE"] = "governance";
        })(LockType = PutPromptLockConstants.LockType || (PutPromptLockConstants.LockType = {}));
    })(PutPromptLockConstants = WatsonxAiMlVmlv1.PutPromptLockConstants || (WatsonxAiMlVmlv1.PutPromptLockConstants = {}));
    /** Constants for the `postPromptSessionEntry` operation. */
    var PostPromptSessionEntryConstants;
    (function (PostPromptSessionEntryConstants) {
        /** Input mode in use for the prompt. */
        var InputMode;
        (function (InputMode) {
            InputMode["STRUCTURED"] = "structured";
            InputMode["FREEFORM"] = "freeform";
            InputMode["CHAT"] = "chat";
        })(InputMode = PostPromptSessionEntryConstants.InputMode || (PostPromptSessionEntryConstants.InputMode = {}));
    })(PostPromptSessionEntryConstants = WatsonxAiMlVmlv1.PostPromptSessionEntryConstants || (WatsonxAiMlVmlv1.PostPromptSessionEntryConstants = {}));
    /** Constants for the `putPromptSessionLock` operation. */
    var PutPromptSessionLockConstants;
    (function (PutPromptSessionLockConstants) {
        /** Lock type: 'edit' for working on prompts/templates or 'governance'. Can only be supplied in PUT /lock requests. */
        var LockType;
        (function (LockType) {
            LockType["EDIT"] = "edit";
            LockType["GOVERNANCE"] = "governance";
        })(LockType = PutPromptSessionLockConstants.LockType || (PutPromptSessionLockConstants.LockType = {}));
    })(PutPromptSessionLockConstants = WatsonxAiMlVmlv1.PutPromptSessionLockConstants || (WatsonxAiMlVmlv1.PutPromptSessionLockConstants = {}));
    /** Constants for the `textGenerationStream` operation. */
    var TextGenerationStreamConstants;
    (function (TextGenerationStreamConstants) {
        /** The type of the response: application/json or text/event-stream. A character encoding can be specified by including a `charset` parameter. For example, 'text/event-stream;charset=utf-8'. */
        var Accept;
        (function (Accept) {
            Accept["APPLICATION_JSON"] = "application/json";
            Accept["TEXT_EVENT_STREAM"] = "text/event-stream";
        })(Accept = TextGenerationStreamConstants.Accept || (TextGenerationStreamConstants.Accept = {}));
    })(TextGenerationStreamConstants = WatsonxAiMlVmlv1.TextGenerationStreamConstants || (WatsonxAiMlVmlv1.TextGenerationStreamConstants = {}));
    /** Constants for the `trainingsList` operation. */
    var TrainingsListConstants;
    (function (TrainingsListConstants) {
        /** Filter based on on the training job state. */
        var State;
        (function (State) {
            State["QUEUED"] = "queued";
            State["PENDING"] = "pending";
            State["RUNNING"] = "running";
            State["STORING"] = "storing";
            State["COMPLETED"] = "completed";
            State["FAILED"] = "failed";
            State["CANCELED"] = "canceled";
        })(State = TrainingsListConstants.State || (TrainingsListConstants.State = {}));
    })(TrainingsListConstants = WatsonxAiMlVmlv1.TrainingsListConstants || (WatsonxAiMlVmlv1.TrainingsListConstants = {}));
    var ApiErrorTarget;
    (function (ApiErrorTarget) {
        var Constants;
        (function (Constants) {
            /** The type of the problematic field. */
            var Type;
            (function (Type) {
                Type["FIELD"] = "field";
                Type["QUERY"] = "query";
                Type["HEADER"] = "header";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = ApiErrorTarget.Constants || (ApiErrorTarget.Constants = {}));
    })(ApiErrorTarget = WatsonxAiMlVmlv1.ApiErrorTarget || (WatsonxAiMlVmlv1.ApiErrorTarget = {}));
    var DataConnectionReference;
    (function (DataConnectionReference) {
        var Constants;
        (function (Constants) {
            /** The data source type like `connection_asset` or `data_asset`. If the data connection contains just a schema then this field is not required. */
            var Type;
            (function (Type) {
                Type["CONNECTION_ASSET"] = "connection_asset";
                Type["DATA_ASSET"] = "data_asset";
                Type["CONTAINER"] = "container";
                Type["URL"] = "url";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = DataConnectionReference.Constants || (DataConnectionReference.Constants = {}));
    })(DataConnectionReference = WatsonxAiMlVmlv1.DataConnectionReference || (WatsonxAiMlVmlv1.DataConnectionReference = {}));
    var DeploymentEntity;
    (function (DeploymentEntity) {
        var Constants;
        (function (Constants) {
            /** The type of the deployed model. The possible values are the following: 1. `prompt_tune` - when a prompt tuned model is deployed. 2. `foundation_model` - when a prompt template is used on a pre-deployed IBM provided model. */
            var DeployedAssetType;
            (function (DeployedAssetType) {
                DeployedAssetType["PROMPT_TUNE"] = "prompt_tune";
                DeployedAssetType["FOUNDATION_MODEL"] = "foundation_model";
            })(DeployedAssetType = Constants.DeployedAssetType || (Constants.DeployedAssetType = {}));
        })(Constants = DeploymentEntity.Constants || (DeploymentEntity.Constants = {}));
    })(DeploymentEntity = WatsonxAiMlVmlv1.DeploymentEntity || (WatsonxAiMlVmlv1.DeploymentEntity = {}));
    var DeploymentStatus;
    (function (DeploymentStatus) {
        var Constants;
        (function (Constants) {
            /** Specifies the current state of the deployment. */
            var State;
            (function (State) {
                State["INITIALIZING"] = "initializing";
                State["UPDATING"] = "updating";
                State["READY"] = "ready";
                State["FAILED"] = "failed";
            })(State = Constants.State || (Constants.State = {}));
        })(Constants = DeploymentStatus.Constants || (DeploymentStatus.Constants = {}));
    })(DeploymentStatus = WatsonxAiMlVmlv1.DeploymentStatus || (WatsonxAiMlVmlv1.DeploymentStatus = {}));
    var DeploymentTextGenProperties;
    (function (DeploymentTextGenProperties) {
        var Constants;
        (function (Constants) {
            /** Represents the strategy used for picking the tokens during generation of the output text. During text generation when parameter value is set to greedy, each successive token corresponds to the highest probability token given the text that has already been generated. This strategy can lead to repetitive results especially for longer output sequences. The alternative sample strategy generates text by picking subsequent tokens based on the probability distribution of possible next tokens defined by (i.e., conditioned on) the already-generated text and the top_k and top_p parameters described below. See this [url](https://huggingface.co/blog/how-to-generate) for an informative article about text generation. */
            var DecodingMethod;
            (function (DecodingMethod) {
                DecodingMethod["SAMPLE"] = "sample";
                DecodingMethod["GREEDY"] = "greedy";
            })(DecodingMethod = Constants.DecodingMethod || (Constants.DecodingMethod = {}));
        })(Constants = DeploymentTextGenProperties.Constants || (DeploymentTextGenProperties.Constants = {}));
    })(DeploymentTextGenProperties = WatsonxAiMlVmlv1.DeploymentTextGenProperties || (WatsonxAiMlVmlv1.DeploymentTextGenProperties = {}));
    var FoundationModel;
    (function (FoundationModel) {
        var Constants;
        (function (Constants) {
            /** The tier of the model, depending on the `tier` the billing will be different, refer to the plan for the details. */
            var Tier;
            (function (Tier) {
                Tier["CLASS_1"] = "class_1";
                Tier["CLASS_2"] = "class_2";
                Tier["CLASS_3"] = "class_3";
            })(Tier = Constants.Tier || (Constants.Tier = {}));
        })(Constants = FoundationModel.Constants || (FoundationModel.Constants = {}));
    })(FoundationModel = WatsonxAiMlVmlv1.FoundationModel || (WatsonxAiMlVmlv1.FoundationModel = {}));
    var JsonPatchOperation;
    (function (JsonPatchOperation) {
        var Constants;
        (function (Constants) {
            /** The operation to be performed. */
            var Op;
            (function (Op) {
                Op["ADD"] = "add";
                Op["REMOVE"] = "remove";
                Op["REPLACE"] = "replace";
                Op["MOVE"] = "move";
                Op["COPY"] = "copy";
                Op["TEST"] = "test";
            })(Op = Constants.Op || (Constants.Op = {}));
        })(Constants = JsonPatchOperation.Constants || (JsonPatchOperation.Constants = {}));
    })(JsonPatchOperation = WatsonxAiMlVmlv1.JsonPatchOperation || (WatsonxAiMlVmlv1.JsonPatchOperation = {}));
    var LifeCycleState;
    (function (LifeCycleState) {
        var Constants;
        (function (Constants) {
            /** The possible lifecycle stages, in order, are described below: - `available`: this means that the model is available for use. - `deprecated`: this means that the model is still available but the model will be removed soon, so an alternative model should be used. - `constricted`: this means that the model is still available for inferencing but cannot be used for training or in a deployment. The model will be removed soon so an alternative model should be used. - `withdrawn`: this means that the model is no longer available, check the `alternative_model_ids` to see what it can be replaced by. */
            var Id;
            (function (Id) {
                Id["AVAILABLE"] = "available";
                Id["DEPRECATED"] = "deprecated";
                Id["CONSTRICTED"] = "constricted";
                Id["WITHDRAWN"] = "withdrawn";
            })(Id = Constants.Id || (Constants.Id = {}));
        })(Constants = LifeCycleState.Constants || (LifeCycleState.Constants = {}));
    })(LifeCycleState = WatsonxAiMlVmlv1.LifeCycleState || (WatsonxAiMlVmlv1.LifeCycleState = {}));
    var ObjectLocation;
    (function (ObjectLocation) {
        var Constants;
        (function (Constants) {
            /** The data source type like `connection_asset` or `data_asset`. */
            var Type;
            (function (Type) {
                Type["CONNECTION_ASSET"] = "connection_asset";
                Type["DATA_ASSET"] = "data_asset";
                Type["CONTAINER"] = "container";
                Type["URL"] = "url";
            })(Type = Constants.Type || (Constants.Type = {}));
        })(Constants = ObjectLocation.Constants || (ObjectLocation.Constants = {}));
    })(ObjectLocation = WatsonxAiMlVmlv1.ObjectLocation || (WatsonxAiMlVmlv1.ObjectLocation = {}));
    var PromptTuning;
    (function (PromptTuning) {
        var Constants;
        (function (Constants) {
            /** Type of Peft (Parameter-Efficient Fine-Tuning) config to build. */
            var TuningType;
            (function (TuningType) {
                TuningType["PROMPT_TUNING"] = "prompt_tuning";
            })(TuningType = Constants.TuningType || (Constants.TuningType = {}));
            /** The `text` method requires `init_text` to be set. */
            var InitMethod;
            (function (InitMethod) {
                InitMethod["RANDOM"] = "random";
                InitMethod["TEXT"] = "text";
            })(InitMethod = Constants.InitMethod || (Constants.InitMethod = {}));
        })(Constants = PromptTuning.Constants || (PromptTuning.Constants = {}));
    })(PromptTuning = WatsonxAiMlVmlv1.PromptTuning || (WatsonxAiMlVmlv1.PromptTuning = {}));
    var TextGenRequestParameters;
    (function (TextGenRequestParameters) {
        var Constants;
        (function (Constants) {
            /** Represents the strategy used for picking the tokens during generation of the output text. During text generation when parameter value is set to greedy, each successive token corresponds to the highest probability token given the text that has already been generated. This strategy can lead to repetitive results especially for longer output sequences. The alternative sample strategy generates text by picking subsequent tokens based on the probability distribution of possible next tokens defined by (i.e., conditioned on) the already-generated text and the top_k and top_p parameters described below. See this [url](https://huggingface.co/blog/how-to-generate) for an informative article about text generation. */
            var DecodingMethod;
            (function (DecodingMethod) {
                DecodingMethod["SAMPLE"] = "sample";
                DecodingMethod["GREEDY"] = "greedy";
            })(DecodingMethod = Constants.DecodingMethod || (Constants.DecodingMethod = {}));
        })(Constants = TextGenRequestParameters.Constants || (TextGenRequestParameters.Constants = {}));
    })(TextGenRequestParameters = WatsonxAiMlVmlv1.TextGenRequestParameters || (WatsonxAiMlVmlv1.TextGenRequestParameters = {}));
    var TextGenResult;
    (function (TextGenResult) {
        var Constants;
        (function (Constants) {
            /** The reason why the call stopped, can be one of: - not_finished - Possibly more tokens to be streamed. - max_tokens - Maximum requested tokens reached. - eos_token - End of sequence token encountered. - cancelled - Request canceled by the client. - time_limit - Time limit reached. - stop_sequence - Stop sequence encountered. - token_limit - Token limit reached. - error - Error encountered. Note that these values will be lower-cased so test for values case insensitive. */
            var StopReason;
            (function (StopReason) {
                StopReason["NOT_FINISHED"] = "not_finished";
                StopReason["MAX_TOKENS"] = "max_tokens";
                StopReason["EOS_TOKEN"] = "eos_token";
                StopReason["CANCELLED"] = "cancelled";
                StopReason["TIME_LIMIT"] = "time_limit";
                StopReason["STOP_SEQUENCE"] = "stop_sequence";
                StopReason["TOKEN_LIMIT"] = "token_limit";
                StopReason["ERROR"] = "error";
            })(StopReason = Constants.StopReason || (Constants.StopReason = {}));
        })(Constants = TextGenResult.Constants || (TextGenResult.Constants = {}));
    })(TextGenResult = WatsonxAiMlVmlv1.TextGenResult || (WatsonxAiMlVmlv1.TextGenResult = {}));
    var TrainingStatus;
    (function (TrainingStatus) {
        var Constants;
        (function (Constants) {
            /** Current state of training. */
            var State;
            (function (State) {
                State["QUEUED"] = "queued";
                State["PENDING"] = "pending";
                State["RUNNING"] = "running";
                State["STORING"] = "storing";
                State["COMPLETED"] = "completed";
                State["FAILED"] = "failed";
                State["CANCELED"] = "canceled";
            })(State = Constants.State || (Constants.State = {}));
        })(Constants = TrainingStatus.Constants || (TrainingStatus.Constants = {}));
    })(TrainingStatus = WatsonxAiMlVmlv1.TrainingStatus || (WatsonxAiMlVmlv1.TrainingStatus = {}));
    var ChatItem;
    (function (ChatItem) {
        var Constants;
        (function (Constants) {
            /** Type */
            var Type;
            (function (Type) {
                Type["QUESTION"] = "question";
                Type["ANSWER"] = "answer";
            })(Type = Constants.Type || (Constants.Type = {}));
            /** Status */
            var Status;
            (function (Status) {
                Status["READY"] = "ready";
                Status["ERROR"] = "error";
            })(Status = Constants.Status || (Constants.Status = {}));
        })(Constants = ChatItem.Constants || (ChatItem.Constants = {}));
    })(ChatItem = WatsonxAiMlVmlv1.ChatItem || (WatsonxAiMlVmlv1.ChatItem = {}));
    var PromptLock;
    (function (PromptLock) {
        var Constants;
        (function (Constants) {
            /** Lock type: 'edit' for working on prompts/templates or 'governance'. Can only be supplied in PUT /lock requests. */
            var LockType;
            (function (LockType) {
                LockType["EDIT"] = "edit";
                LockType["GOVERNANCE"] = "governance";
            })(LockType = Constants.LockType || (Constants.LockType = {}));
        })(Constants = PromptLock.Constants || (PromptLock.Constants = {}));
    })(PromptLock = WatsonxAiMlVmlv1.PromptLock || (WatsonxAiMlVmlv1.PromptLock = {}));
    var WxPromptResponse;
    (function (WxPromptResponse) {
        var Constants;
        (function (Constants) {
            /** Input mode in use for the prompt. */
            var InputMode;
            (function (InputMode) {
                InputMode["STRUCTURED"] = "structured";
                InputMode["FREEFORM"] = "freeform";
                InputMode["CHAT"] = "chat";
                InputMode["DETACHED"] = "detached";
            })(InputMode = Constants.InputMode || (Constants.InputMode = {}));
        })(Constants = WxPromptResponse.Constants || (WxPromptResponse.Constants = {}));
    })(WxPromptResponse = WatsonxAiMlVmlv1.WxPromptResponse || (WatsonxAiMlVmlv1.WxPromptResponse = {}));
    var WxPromptSessionEntry;
    (function (WxPromptSessionEntry) {
        var Constants;
        (function (Constants) {
            /** Input mode in use for the prompt. */
            var InputMode;
            (function (InputMode) {
                InputMode["STRUCTURED"] = "structured";
                InputMode["FREEFORM"] = "freeform";
                InputMode["CHAT"] = "chat";
            })(InputMode = Constants.InputMode || (Constants.InputMode = {}));
        })(Constants = WxPromptSessionEntry.Constants || (WxPromptSessionEntry.Constants = {}));
    })(WxPromptSessionEntry = WatsonxAiMlVmlv1.WxPromptSessionEntry || (WatsonxAiMlVmlv1.WxPromptSessionEntry = {}));
    /*************************
     * pager classes
     ************************/
    /**
     * FoundationModelSpecsPager can be used to simplify the use of listFoundationModelSpecs().
     */
    var FoundationModelSpecsPager = /** @class */ (function () {
        /**
         * Construct a FoundationModelSpecsPager object.
         *
         * @param {WatsonxAiMlVmlv1}  client - The service client instance used to invoke listFoundationModelSpecs()
         * @param {Object} [params] - The parameters to be passed to listFoundationModelSpecs()
         * @constructor
         * @returns {FoundationModelSpecsPager}
         */
        function FoundationModelSpecsPager(client, params) {
            if (params && params.start) {
                throw new Error("the params.start field should not be set");
            }
            this._hasNext = true;
            this.pageContext = { next: undefined };
            this.client = client;
            this.params = JSON.parse(JSON.stringify(params || {}));
        }
        /**
         * Returns true if there are potentially more results to be retrieved by invoking getNext().
         * @returns {boolean}
         */
        FoundationModelSpecsPager.prototype.hasNext = function () {
            return this._hasNext;
        };
        /**
         * Returns the next page of results by invoking listFoundationModelSpecs().
         * @returns {Promise<WatsonxAiMlVmlv1.FoundationModel[]>}
         */
        FoundationModelSpecsPager.prototype.getNext = function () {
            return __awaiter(this, void 0, void 0, function () {
                var response, result, next;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.hasNext()) {
                                throw new Error('No more results available');
                            }
                            if (this.pageContext.next) {
                                this.params.start = this.pageContext.next;
                            }
                            return [4 /*yield*/, this.client.listFoundationModelSpecs(this.params)];
                        case 1:
                            response = _a.sent();
                            result = response.result;
                            if (result && result.next) {
                                if (result.next.href) {
                                    next = (0, ibm_cloud_sdk_core_1.getQueryParam)(result.next.href, 'start');
                                }
                            }
                            this.pageContext.next = next;
                            if (!this.pageContext.next) {
                                this._hasNext = false;
                            }
                            return [2 /*return*/, result.resources];
                    }
                });
            });
        };
        /**
         * Returns all results by invoking listFoundationModelSpecs() repeatedly until all pages of results have been retrieved.
         * @returns {Promise<WatsonxAiMlVmlv1.FoundationModel[]>}
         */
        FoundationModelSpecsPager.prototype.getAll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var results, nextPage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            results = [];
                            _a.label = 1;
                        case 1:
                            if (!this.hasNext()) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getNext()];
                        case 2:
                            nextPage = _a.sent();
                            results.push.apply(results, nextPage);
                            return [3 /*break*/, 1];
                        case 3: return [2 /*return*/, results];
                    }
                });
            });
        };
        return FoundationModelSpecsPager;
    }());
    WatsonxAiMlVmlv1.FoundationModelSpecsPager = FoundationModelSpecsPager;
    /**
     * FoundationModelTasksPager can be used to simplify the use of listFoundationModelTasks().
     */
    var FoundationModelTasksPager = /** @class */ (function () {
        /**
         * Construct a FoundationModelTasksPager object.
         *
         * @param {WatsonxAiMlVmlv1}  client - The service client instance used to invoke listFoundationModelTasks()
         * @param {Object} [params] - The parameters to be passed to listFoundationModelTasks()
         * @constructor
         * @returns {FoundationModelTasksPager}
         */
        function FoundationModelTasksPager(client, params) {
            if (params && params.start) {
                throw new Error("the params.start field should not be set");
            }
            this._hasNext = true;
            this.pageContext = { next: undefined };
            this.client = client;
            this.params = JSON.parse(JSON.stringify(params || {}));
        }
        /**
         * Returns true if there are potentially more results to be retrieved by invoking getNext().
         * @returns {boolean}
         */
        FoundationModelTasksPager.prototype.hasNext = function () {
            return this._hasNext;
        };
        /**
         * Returns the next page of results by invoking listFoundationModelTasks().
         * @returns {Promise<WatsonxAiMlVmlv1.FoundationModelTask[]>}
         */
        FoundationModelTasksPager.prototype.getNext = function () {
            return __awaiter(this, void 0, void 0, function () {
                var response, result, next;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.hasNext()) {
                                throw new Error('No more results available');
                            }
                            if (this.pageContext.next) {
                                this.params.start = this.pageContext.next;
                            }
                            return [4 /*yield*/, this.client.listFoundationModelTasks(this.params)];
                        case 1:
                            response = _a.sent();
                            result = response.result;
                            if (result && result.next) {
                                if (result.next.href) {
                                    next = (0, ibm_cloud_sdk_core_1.getQueryParam)(result.next.href, 'start');
                                }
                            }
                            this.pageContext.next = next;
                            if (!this.pageContext.next) {
                                this._hasNext = false;
                            }
                            return [2 /*return*/, result.resources];
                    }
                });
            });
        };
        /**
         * Returns all results by invoking listFoundationModelTasks() repeatedly until all pages of results have been retrieved.
         * @returns {Promise<WatsonxAiMlVmlv1.FoundationModelTask[]>}
         */
        FoundationModelTasksPager.prototype.getAll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var results, nextPage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            results = [];
                            _a.label = 1;
                        case 1:
                            if (!this.hasNext()) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getNext()];
                        case 2:
                            nextPage = _a.sent();
                            results.push.apply(results, nextPage);
                            return [3 /*break*/, 1];
                        case 3: return [2 /*return*/, results];
                    }
                });
            });
        };
        return FoundationModelTasksPager;
    }());
    WatsonxAiMlVmlv1.FoundationModelTasksPager = FoundationModelTasksPager;
    /**
     * TrainingsListPager can be used to simplify the use of trainingsList().
     */
    var TrainingsListPager = /** @class */ (function () {
        /**
         * Construct a TrainingsListPager object.
         *
         * @param {WatsonxAiMlVmlv1}  client - The service client instance used to invoke trainingsList()
         * @param {Object} [params] - The parameters to be passed to trainingsList()
         * @constructor
         * @returns {TrainingsListPager}
         */
        function TrainingsListPager(client, params) {
            if (params && params.start) {
                throw new Error("the params.start field should not be set");
            }
            this._hasNext = true;
            this.pageContext = { next: undefined };
            this.client = client;
            this.params = JSON.parse(JSON.stringify(params || {}));
        }
        /**
         * Returns true if there are potentially more results to be retrieved by invoking getNext().
         * @returns {boolean}
         */
        TrainingsListPager.prototype.hasNext = function () {
            return this._hasNext;
        };
        /**
         * Returns the next page of results by invoking trainingsList().
         * @returns {Promise<WatsonxAiMlVmlv1.TrainingResource[]>}
         */
        TrainingsListPager.prototype.getNext = function () {
            return __awaiter(this, void 0, void 0, function () {
                var response, result, next;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.hasNext()) {
                                throw new Error('No more results available');
                            }
                            if (this.pageContext.next) {
                                this.params.start = this.pageContext.next;
                            }
                            return [4 /*yield*/, this.client.trainingsList(this.params)];
                        case 1:
                            response = _a.sent();
                            result = response.result;
                            if (result && result.next) {
                                if (result.next.href) {
                                    next = (0, ibm_cloud_sdk_core_1.getQueryParam)(result.next.href, 'start');
                                }
                            }
                            this.pageContext.next = next;
                            if (!this.pageContext.next) {
                                this._hasNext = false;
                            }
                            return [2 /*return*/, result.resources];
                    }
                });
            });
        };
        /**
         * Returns all results by invoking trainingsList() repeatedly until all pages of results have been retrieved.
         * @returns {Promise<WatsonxAiMlVmlv1.TrainingResource[]>}
         */
        TrainingsListPager.prototype.getAll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var results, nextPage;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            results = [];
                            _a.label = 1;
                        case 1:
                            if (!this.hasNext()) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getNext()];
                        case 2:
                            nextPage = _a.sent();
                            results.push.apply(results, nextPage);
                            return [3 /*break*/, 1];
                        case 3: return [2 /*return*/, results];
                    }
                });
            });
        };
        return TrainingsListPager;
    }());
    WatsonxAiMlVmlv1.TrainingsListPager = TrainingsListPager;
})(WatsonxAiMlVmlv1 || (WatsonxAiMlVmlv1 = {}));
module.exports = WatsonxAiMlVmlv1;
//# sourceMappingURL=vml-v1.js.map